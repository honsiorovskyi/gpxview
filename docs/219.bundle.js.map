{"version":3,"file":"219.bundle.js","mappings":"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","sources":["webpack://gpx-viewer/./node_modules/@raruto/leaflet-elevation/src/handlers/lineargradient.js"],"sourcesContent":["/**\n * @see https://github.com/Raruto/leaflet-elevation/issues/251\n * \n * @example\n * ```js\n * L.control.Elevation({\n *   altitude: true,\n *   distance: true,\n *   handlers: [ 'Altitude', 'Distance', 'LinearGradient', ],\n *   linearGradient: {\n *     attr: 'z',\n *     path: 'altitude',\n *     range: { 0.0: '#008800', 0.5: '#ffff00', 1.0: '#ff0000' },\n *     min: 'elevation_min',\n *     max: 'elevation_max',\n *   },\n * })\n * ```\n */\nexport function LinearGradient() {\n\n  if (!this.options.linearGradient) {\n    return {};\n  }\n\n  const _ = L.Control.Elevation.Utils;\n\n  /**\n   * Initialize gradient color palette.\n   */\n  const get_palette = function ({range, min, max, depth = 256}) {\n    const canvas = document.createElement('canvas'),\n      ctx = canvas.getContext('2d'),\n      gradient = ctx.createLinearGradient(0, 0, 0, depth);\n\n    canvas.width = 1;\n    canvas.height = depth;\n\n    for (let i in range) {\n      gradient.addColorStop(i, range[i]);\n    }\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, 1, depth);\n\n    const { data } = ctx.getImageData(0, 0, 1, depth);\n\n    return {\n      /**\n       * Gets the RGB values of a given z value of the current palette.\n       * \n       * @param {number} value - Value to get the color for, should be between min and max.\n       * @returns {string} The RGB values as `rgb(r, g, b)` string\n       */\n      getRGBColor(value) {\n        const idx = Math.floor(Math.min(Math.max((value - min) / (max - min), 0), 0.999) * depth) * 4;\n        return 'rgb(' + [data[idx], data[idx + 1], data[idx + 2]].join(',') + ')';\n      }\n    };\n  };\n\n  const { preferCanvas } = this.options;\n  const { attr, path: path_name, range, min, max } = L.extend({\n    attr: 'z',\n    path: 'altitude',\n    range: { 0.0: '#008800', 0.5: '#ffff00', 1.0: '#ff0000' },\n    min: 'elevation_min',\n    max: 'elevation_max',\n  }, (true === this.options.linearGradient) ? {} : this.options.linearGradient);\n\n  const gradient_id = path_name + '-gradient-' + _.randomId();\n  const legend_id   = 'legend-' + gradient_id;\n\n  // Charte profile gradient \n  this.on('elechart_axis', () => {\n    if (!this._data.length) return;\n\n    const chart = this._chart;\n    const path = chart._paths[path_name];\n    const { defs } = chart._chart.utils;\n\n    const palette = get_palette({\n      min: isFinite(this.track_info[min]) ? this.track_info[min] : 0,\n      max: isFinite(this.track_info[max]) ? this.track_info[max] : 1,\n      range,\n    });\n\n    let gradient;\n\n    if (preferCanvas) {\n      /** ref: `path.__fillStyle` within L.Control.Elevation.Utils::drawCanvas(ctx, path) */\n      path.__fillStyle = gradient = chart._context.createLinearGradient(0, 0, chart._width(), 0);\n    } else {\n      defs.select('#' + gradient_id).remove();\n      gradient = defs.append('svg:linearGradient').attr('id', gradient_id);\n      gradient.addColorStop = function(offset, color) { gradient.append('svg:stop').attr('offset', offset).attr('stop-color', color) };\n      path.attr('fill', 'url(#' + gradient_id + ')').classed('area', false);\n    }\n\n    // Generate gradient for each segment picking colors from palette\n    for (let i = 0, data = this._data; i < data.length; i++) {\n      gradient.addColorStop((i) / data.length, palette.getRGBColor(data[i][attr]));\n    }\n\n  });\n\n  // Legend item gradient\n  this.on('elechart_updated', () => {\n    const chart = this._chart;\n    const { defs } = chart._chart.utils;\n    defs.select('#' + legend_id).remove();\n    const legendGradient = defs.append('svg:linearGradient').attr('id', legend_id);\n    Object.keys(range).sort().forEach(i => legendGradient.append('svg:stop').attr('offset', i).attr('stop-color', range[i]));\n\n    chart._container\n      .select('.legend-' + path_name + ' > rect')\n      .attr('fill', 'url(#' + legend_id + ')')\n      .classed('area', false);\n  });\n\n  return { };\n}"],"names":["LinearGradient","this","options","linearGradient","_","L","Control","Elevation","Utils","preferCanvas","attr","path","path_name","range","min","max","extend","gradient_id","randomId","legend_id","on","_data","length","chart","_chart","_paths","defs","utils","palette","depth","canvas","document","createElement","ctx","getContext","gradient","createLinearGradient","width","height","i","addColorStop","fillStyle","fillRect","data","getImageData","getRGBColor","value","idx","Math","floor","join","get_palette","isFinite","track_info","__fillStyle","_context","_width","select","remove","append","offset","color","classed","legendGradient","Object","keys","sort","forEach","_container"],"sourceRoot":""}